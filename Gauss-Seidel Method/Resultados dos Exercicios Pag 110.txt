Aluno: Pedro Augusto Gomes Minaré
Matrícula: 201306424

Results for Gauss-Seidel Method [Kmax = 10]

Example 2.40 page 87:

4.999999999934613
0.9999999999916576
-1.999999999985254

Ex 2.31 page 110
The solution obtained by Jacobi Method:
2.999999993047815
-1.0000000030096816
4.999999998133795
7.00000000023329

Ex 2.32 page 110
The solution couldn't converge by Gauss-Seidel Method ! Converges by Jacobi Method.
-42495.0
44034.0
-3069.0

Ex 2.33 page 110
The solution converges by Gauss-Seidel Method.
2.05078125
3.9375
5.994140625

Gauss-Seidel Main Class:
############################################################################################################################
package com.project.gauss_seidel;

public class GaussSeidelMainClass {

	public static void main(String[] args) {
		double[][] A = { {10, 3, -2}, {2, 8, -1}, {1, 1, 5} }; // A matrix
		double[] b = {57, 20, -4}; // b matrix
		
		/* Ex: 2.31 pg 110
		 * double[][] A = { {10, 2, -3, 5}, {1, 8, -1, 2}, {2, -1, -5, 1}, {-1, 2, 3, 20} }; // A matrix
		   double[] b = {48, 4, -11, 150}; // b matrix
		   
		   Ex: 2.32 pg 110
		 * double[][] A = { {1, 2, -2}, {1, 1, 1}, {2, 2, 1} }; // A matrix
		   double[] b = {-1, 6, 9}; // b matrix
		   
		   Ex: 2.33 pg 110
		 * double[][] A = { {1, -0.5, 0.5}, {1, 1, 1}, {-0.5, -0.5, 1} }; // A matrix
		   double[] b = {3, 12, 3}; // b matrix
		   
		   Ex 2.40 pg 87
		   double[][] A = { {10, 3, -2}, {2, 8, -1}, {1, 1, 5} }; // A matrix
	       double[] b = {57, 20, -4}; // b matrix
		 */				
		
		GaussSeidel solver = new GaussSeidel(A, b);
		double[] x = solver.solveSystem(10); //precision
		
		//Matrix A
		for (int i = 0; i < x.length; i++) {
			System.out.println(x[i]);
		}

	}

}
##############################################################################################################################

Gauss-Seidel Class:
##############################################################################################################################
package com.project.gauss_seidel;

public class GaussSeidel {
	private double[][] A;
	private double[] b;
	
	/*
	 * Now I create a new constructor that takes as argument an incomplete matrix and a coefficient vector. Let it throw an exception,
	 * if one of the arguments is NULL or if they don't have the same order...
	 */
	public GaussSeidel(double[][] A, double[] b) {
		if (A == null || b == null) {
			throw new NullPointerException();
		}
		
		if (A.length != b.length) {
			throw new IllegalArgumentException();
		}
		
		this.A = A;
		this.b = b;
	}
	
	/*
	 * Creating a method to check whether the linear system can be solved applying the Gauss-Seidel method
	 */
	
	public boolean converges() {
		/*
		 * The Gauss-Seidel method can't converge if the incomplete matrix A is not a diagonally dominant matrix.
		 * So, each element of the diagonal of the matrix must be less than the sum of the values of its own row.
		 */
		for (int i = 0; i < A.length; i++) {
			double diagonal = Math.abs(A[i][i]);
			double tmpSum = 0;
			
			for (int j = 0; j < A.length; j++) {
				if (i != j)
					tmpSum += Math.abs(A[i][j]);
				if (tmpSum >= diagonal)
					return false;
			}
		}
		return true;
	}
	
	public double[] solveSystem(int precision) {
		if (!converges()) //if the converges() method returns false, just notify the user since it could still converge.
			System.err.println("The solution couldn't converge ! Please try again later xD");
		
		double[] x = initialize(new double[A.length]);
		for (int k = 0; k < precision; k++) // precision of the solution.
			for (int i = 0; i < A.length; i++) {
				double x0 = 0;
				for (int j = 0; j < A.length; j++)
					if (i != j) {
						x0 += A[i][j]*x[j];
					}
				x[i] = (b[i] - x0)/A[i][i]; // bi-x0/aii
			}
		return x;
	}
	
	private double[] initialize(double[] ds) {
		for (int i = 0; i < ds.length; i++) {
			ds[i] = 0;
		}
		return ds;
	}
}
##############################################################################################################################


